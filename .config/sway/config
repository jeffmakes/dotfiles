# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term gnome-terminal 
# Your preferred application launcher
# Note: it's recommended that you pass the final command to sway
# set $menu dmenu_path | dmenu | xargs swaymsg exec --
set $menu rofi -m -4 -show run -theme Arc-Dark | xargs swaymsg exec --
set $alt_menu rofi -m -4 -show drun -theme Arc-Dark | xargs swaymsg exec -- 

# Lock command
#set $lock '/usr/local/bin/swaylock -f --screenshots --effect-blur 7x5 --inside-color 00000088 --line-color abcdef00 --separator-color abcdef00'
set $lock 'swaylock -f --screenshots --effect-blur 7x5 --inside-color 00000088 --line-color abcdef00 --separator-color abcdef00'


## Colors, etc.
# Set colors
#set $bg #11171717
set $bg #4c232425 
set $fg #d2d2d2
set $br #005c93be
set $ia #ffb700be
set $ur #ff0000
#4c232425
#swaymsg client.focused "#005c93" "#005c9e" "#d2d2d2" "#ffb700" "#005c93"


# class                 border  backgr. text    indicator child_border
client.focused          $br     $br     $fg     $ia       $br
client.focused_inactive $bg     $bg     $fg     $ia       $bg
client.unfocused        $bg     $bg     $fg     $ia       $bg
# Xwayland only:
client.urgent           $ur     $ur     $fg     $ia       $br 
#client.placeholder     $br     $br     $fg     $bg       $br # Ignored

## Border
default_border normal 5


### Output configuration

# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg ~/tools/sway/wallpapers/iceland1.jpg fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' \
#               resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

##### DPMS crashes sway at the moment...
#exec swayidle -w \
#         timeout 10 $lock \
#         timeout 20 'swaymsg "output * dpms off"' \
#              resume 'swaymsg "output * dpms on"' \
#         before-sleep $lock

#Version without DPMS:
exec swayidle -w \
         timeout 600 $lock \
         before-sleep $lock

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
# You can get the names of your inputs by running: swaymsg -t get_inputs
#
# Read `man 5 sway-input` for more information about this section.
input "1130:45201:PixArt_Cherry_USB_Optical_Mouse" { 
     pointer_accel -0.1
}

input * xkb_layout "gb"
#input *	xkb_options "caps:backspace"
# I am now using caps2esc, see http://nelsonware.com/blog/2019/04/30/how-to-map-caps-lock-to-escape-and-control-on-fedora-via-caps2esc.html and https://gitlab.com/interception/linux/plugins/caps2esc

# caps2esc now makes CapsLock ctrl (when held) and ESC (when tapped). This line makes ESC (which is now caps!) an extra ESC, to reduce confusion. 
input *	xkb_options "caps:escape" 

#exec xset r 66 # enable auto-repeat on capslock (backspace)

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+q kill

    # Start your launcher
    bindsym $mod+d exec $menu
    bindsym $mod+Shift+d exec $alt_menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
    bindsym Ctrl+Mod1+backspace exec swaymsg exit

    bindsym $mod+Shift+s exec swaynag -t warning -m 'Do you want to suspend?' --button-dismiss 'Yes please.' 'echo mem | sudo tee /sys/power/state'

#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace 1
    bindsym $mod+2 workspace 2
    bindsym $mod+3 workspace 3
    bindsym $mod+4 workspace 4
    bindsym $mod+5 workspace 5
    bindsym $mod+6 workspace 6
    bindsym $mod+7 workspace 7
    bindsym $mod+8 workspace 8
    bindsym $mod+9 workspace 9
    bindsym $mod+0 workspace 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace 1
    bindsym $mod+Shift+2 move container to workspace 2
    bindsym $mod+Shift+3 move container to workspace 3
    bindsym $mod+Shift+4 move container to workspace 4
    bindsym $mod+Shift+5 move container to workspace 5
    bindsym $mod+Shift+6 move container to workspace 6
    bindsym $mod+Shift+7 move container to workspace 7
    bindsym $mod+Shift+8 move container to workspace 8
    bindsym $mod+Shift+9 move container to workspace 9
    bindsym $mod+Shift+0 move container to workspace 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # move workspace to monitor
    bindsym $mod+Ctrl+Left move workspace to output left
    bindsym $mod+Ctrl+Down move workspace to output down
    bindsym $mod+Ctrl+Up move workspace to output up
    bindsym $mod+Ctrl+Right move workspace to output right
    bindsym $mod+Ctrl+h move workspace to output left
    bindsym $mod+Ctrl+j move workspace to output down
    bindsym $mod+Ctrl+k move workspace to output up
    bindsym $mod+Ctrl+l move workspace to output right

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+backslash splith
    bindsym $mod+Shift+backslash splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 50px
    bindsym $down resize grow height 50px
    bindsym $up resize shrink height 50px
    bindsym $right resize grow width 50px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 50px
    bindsym Down resize grow height 50px
    bindsym Up resize shrink height 50px
    bindsym Right resize grow width 50px
    

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

# Pulse Audio controls
#bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +10% #increase sound volume
#bindsym XF86AudioLowerVolume exec pactl set-sink-volume  @DEFAULT_SINK@ -10% #decrease sound volume
#bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle # mute sound
set $volumectl /home/jeff/tools/sway/avizo/volumectl
bindsym XF86AudioRaiseVolume exec $volumectl raise
bindsym XF86AudioLowerVolume exec $volumectl lower
bindsym XF86AudioMute exec /home/jeff/projects/2020/sound-switcher/switcher.py
bindsym Shift+XF86AudioMute exec /home/jeff/projects/2020/sound-switcher/switcher.py --reverse
bindsym XF86AudioMicMute exec amixer set Capture toggle

# avizo provides a little popover window to display volume level when it's adjusted
for_window [app_id="avizo-service"] border pixel 0
for_window [app_id="avizo-service"] sticky toggle
no_focus [app_id="avizo-service"]


# Screen brightness controls
#bindsym XF86MonBrightnessUp exec light -A 5
#bindsym XF86MonBrightnessDown exec light -U 5
bindsym XF86MonBrightnessUp exec lightctl raise
bindsym XF86MonBrightnessDown exec lightctl lower

# Screen lock
bindsym $mod+Mod1+l exec $lock 

# Print screen

#bindsym Print :exec "slurp | grim -g - ~/media/screenshots/$(date +%Y-%m-%d_%H:%M).png "
bindsym Print :exec "slurp | grim -g - ~/media/screenshots/ss.png && notify-send 'Screenshot' 'Saved to ~/media/screenshots' "

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
#bar {
#    position top
#
#    # When the status_command prints a new line to stdout, swaybar updates.
#    # The default just shows the current date and time.
#    status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done
#
#    colors {
#        statusline #ffffff
#        background #323232
#        inactive_workspace #32323200 #32323200 #5c5c5c
#    }
#}
bar {
    swaybar_command waybar
}

set $ghost alacritty --class "ghost" --title "ghost" # command to run when creating a "ghost" window
# Create a "ghost" window - a transparent window for aligning other windows
for_window [app_id="ghost"] opacity 0
bindsym $mod+Control+Return exec $ghost

# General settings
#exec_always swaymsg gaps inner all set 30
gaps inner 20

# Start-up applications
# NOTE: these won't run if you just press mod+shift+c - that only reloads the config.
exec kanshi                             # automatic hotplug display configuration daemon. config in ~/.config/kanshi
exec mako                               # notification daemon
exec syncthing -no-browser -home="/home/jeff/.config/syncthing"
exec avizo-service                      # volume popup
exec nm-applet --indicator              # network manager
exec pulseaudio --start
include /etc/sway/config.d/*
